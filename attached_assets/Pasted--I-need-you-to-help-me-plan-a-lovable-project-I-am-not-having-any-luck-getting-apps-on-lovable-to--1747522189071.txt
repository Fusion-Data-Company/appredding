

I need you to help me plan a lovable project. I am not having any luck getting apps on lovable to deployment. I need it all put into the front end prompt and I need to know exactly how to make it work from the start. so we are going to put all of the data needed into the first one. We are going to use open router as our chat model so we can use whatever model we want to at whatever stage we want to. THe app is a simple ui interface that allows a marketing agent to create and post automated social media content. I want the user interface to have the attached component as the hero section on the UI page. I just pasted it. I want the lovabale builder to pull this component and make the text say "Social Media Assistant" for the header text. The sub text is to say "Generate, proof, and post social media content and newsletters with timesaving automations and premium quality content." and then have the robot in the hero section. Then I want the second component to be right under that hero section and I want it to allow a user to work with a choice of models from open router with a drop down menu showing all the models. The second pasted internet chat has 4 buttons under the chat section. Clone UI, Impoort Figma, Create Page, and Improve. In the clone UI buttons place I want a button that says Social Media, the import figma button needs to be a newsletter button. the create page button needs to be a Research button. Each of these should be hard prompted to do put a prompt template in the chat box to help the user. It should have all of the wording it needs to create premium enterprise level post and just ask the user for basic information at the end of the prompt. Things like tone, topic, tactic, target, temperature, and timing. Then you will create posts that are of the quality as the agencies like https://hawkemedia.com/, https://www.viralnation.com/, and other elite social media marketing agencies. I need quality posts and each one it to have an image generated for it with Open AI 4.1 image gen as a default and Leonardo AI as an optiion with API key if the user wants to provide their own key. Use open router for the image gen LLM by default and hard wire a prompt template for the image gen that makes the image the highest level of of 8k cinematic sharp and relevant images that it can produce. The process that I want for a social media post is simple. I want the user to open the application, go to the AI chat, select Social Media Post and the first part of the hardwired prompt appears in the box or a marker that represents the hardwired prompt if it is too long to put there, and they answer who they want to reach, what they want to talk about, the tone of the post, and any other details the agent needs to execute the content creation process. I want the main agent to have required questions that it will ask the user to answer if need be, and it can not start the process until it has the correct information and it can ask the user as many times as it needs to. I want the user to be able to upload files for referencing. so the agent can create their context based on that if it is what they desire, and I want them to be able to upload images if they want their own in the image in the post. If the user does not submit these things, then the agent will produce them and create the post based on the information that the user provides. If the agent has to produce them then it will do a web search of the topic they submitted, produce the content in the perfect format for the request, and then ask for the user approval. Once it has approval then it is to post them on whatever social media platforms the user chooses from a drop down of their linked profiles. There needs to be a section for the user to input and save the credentials or keys needed to post to their social media account. I need you to research how bots are posting to each platform and help me make a section allowing a user to link the accounts they have on any of the major platforms. Include the name and icon in the menu and let the user add the ones they want. Only the active ones come down as options on the dropdown. If it is a newsletter then let them also link an email account for outbound email. A also want a page with a calendar of the next 30/60/90 days with the ability to switch to multiple campaigns. I want the user to choose the campaign and see all of the posts scheduled for that campaign in the next 30/60/90 days. I want the user to be able to schedule a creation in advance by giving it the theme, tone, topic, time and target in advance. the 5 T's. If they do, then on that day when the time triggers the post, I want the agent to take the information and do a web search that day for the most current up to data data on that subject, produce the post, produce the image with GPT 4.1, and then put it all together and send the user an alert with a simple but very stylish "Approve" button and below it in the main section where the user talks to the agent the user can edit the post with a prompt and get the results right there.  I also want the agent to present social media posts in the most successful formats on that particular platform. Use emoji's and keep the content professional and non offensive unless told you have an adult audience from a user that is like a bar or nightclub owner or something.  For the default, stay all ages appropriate, use the methodss of the sites that I gave you, and produce the content. I am sure that you understand what I am trying to do now. I want it all recorded and filed in supabase which lovable has a direct connection with. I want the generated images and posts to be saved on a line together with status info. when is it going out, when did it go out, was it a successful deployment and a chance for the user to star the ones that came out well for future refrence. I also want the agent on the main page to use supabase for agent memory so it has an infinite context window from the user. from the day they meet I want the AI learning their style and desires and noting it in an agent memory table of supabase. This is going to be a single user app so it will be good for the agent to learn everything it can about the user and what it wants. There is form called the Makay 66. From Harvey Makay or Macay or Mackay. You will find it easy. It is a customer service form that I want built into the agents hard code so it can learn its user. I do not want the memory to be limited to that. It is a good guide for building rapport. I would love to have the agent   Remembner that I do not get multiple prompts and I have to have the exact instructions from the two things attached in the prompt. to be clear I do not want you to remake those items in my prompt. I just want to make sure lobable knows where to get them. It pulls things well from 21stDev. So, do your research and give me a prompt that will build this out. Give me your best to make every single step I have explained to you not only work, but improve them. 



Build this as my initial prototype Copy-paste this component to /components/ui folder: ```tsx splite.tsx 'use client' import { Suspense, lazy } from 'react' const Spline = lazy(() => import('@splinetool/react-spline')) interface SplineSceneProps { scene: string className?: string } export fu

pasted



Build this as my initial prototype Copy-paste this component to /components/ui folder: ```tsx animated-ai-chat.tsx "use client"; import { useEffect, useRef, useCallback, useTransition } from "react"; import { useState } from "react"; import { cn } from "@/lib/utils"; import { ImageIcon,

pasted



Pasted content

7.79 KB •307 lines
•
Formatting may be inconsistent from source

Build this as my initial prototype

Copy-paste this component to /components/ui folder:
```tsx
splite.tsx
'use client'

import { Suspense, lazy } from 'react'
const Spline = lazy(() => import('@splinetool/react-spline'))

interface SplineSceneProps {
  scene: string
  className?: string
}

export function SplineScene({ scene, className }: SplineSceneProps) {
  return (
    <Suspense 
      fallback={
        <div className="w-full h-full flex items-center justify-center">
          <span className="loader"></span>
        </div>
      }
    >
      <Spline
        scene={scene}
        className={className}
      />
    </Suspense>
  )
}

demo.tsx
'use client'

import { SplineScene } from "@/components/ui/splite";
import { Card } from "@/components/ui/card"
import { Spotlight } from "@/components/ui/spotlight"
 
export function SplineSceneBasic() {
  return (
    <Card className="w-full h-[500px] bg-black/[0.96] relative overflow-hidden">
      <Spotlight
        className="-top-40 left-0 md:left-60 md:-top-20"
        fill="white"
      />
      
      <div className="flex h-full">
        {/* Left content */}
        <div className="flex-1 p-8 relative z-10 flex flex-col justify-center">
          <h1 className="text-4xl md:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-neutral-50 to-neutral-400">
            Interactive 3D
          </h1>
          <p className="mt-4 text-neutral-300 max-w-lg">
            Bring your UI to life with beautiful 3D scenes. Create immersive experiences 
            that capture attention and enhance your design.
          </p>
        </div>

        {/* Right content */}
        <div className="flex-1 relative">
          <SplineScene 
            scene="https://prod.spline.design/kZDDjO5HuC9GJUM2/scene.splinecode"
            className="w-full h-full"
          />
        </div>
      </div>
    </Card>
  )
}
```

Copy-paste these files for dependencies:
```tsx
aceternity/spotlight
import React from "react";
import { cn } from "@/lib/utils";

type SpotlightProps = {
  className?: string;
  fill?: string;
};

export const Spotlight = ({ className, fill }: SpotlightProps) => {
  return (
    <svg
      className={cn(
        "animate-spotlight pointer-events-none absolute z-[1]  h-[169%] w-[138%] lg:w-[84%] opacity-0",
        className
      )}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 3787 2842"
      fill="none"
    >
      <g filter="url(#filter)">
        <ellipse
          cx="1924.71"
          cy="273.501"
          rx="1924.71"
          ry="273.501"
          transform="matrix(-0.822377 -0.568943 -0.568943 0.822377 3631.88 2291.09)"
          fill={fill || "white"}
          fillOpacity="0.21"
        ></ellipse>
      </g>
      <defs>
        <filter
          id="filter"
          x="0.860352"
          y="0.838989"
          width="3785.16"
          height="2840.26"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix"></feFlood>
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="BackgroundImageFix"
            result="shape"
          ></feBlend>
          <feGaussianBlur
            stdDeviation="151"
            result="effect1_foregroundBlur_1065_8"
          ></feGaussianBlur>
        </filter>
      </defs>
    </svg>
  );
};

```
```tsx
ibelick/spotlight
'use client';
import React, { useRef, useState, useCallback, useEffect } from 'react';
import { motion, useSpring, useTransform, SpringOptions } from 'framer-motion';
import { cn } from '@/lib/utils';

type SpotlightProps = {
  className?: string;
  size?: number;
  springOptions?: SpringOptions;
};

export function Spotlight({
  className,
  size = 200,
  springOptions = { bounce: 0 },
}: SpotlightProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isHovered, setIsHovered] = useState(false);
  const [parentElement, setParentElement] = useState<HTMLElement | null>(null);

  const mouseX = useSpring(0, springOptions);
  const mouseY = useSpring(0, springOptions);

  const spotlightLeft = useTransform(mouseX, (x) => `${x - size / 2}px`);
  const spotlightTop = useTransform(mouseY, (y) => `${y - size / 2}px`);

  useEffect(() => {
    if (containerRef.current) {
      const parent = containerRef.current.parentElement;
      if (parent) {
        parent.style.position = 'relative';
        parent.style.overflow = 'hidden';
        setParentElement(parent);
      }
    }
  }, []);

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (!parentElement) return;
      const { left, top } = parentElement.getBoundingClientRect();
      mouseX.set(event.clientX - left);
      mouseY.set(event.clientY - top);
    },
    [mouseX, mouseY, parentElement]
  );

  useEffect(() => {
    if (!parentElement) return;

    parentElement.addEventListener('mousemove', handleMouseMove);
    parentElement.addEventListener('mouseenter', () => setIsHovered(true));
    parentElement.addEventListener('mouseleave', () => setIsHovered(false));

    return () => {
      parentElement.removeEventListener('mousemove', handleMouseMove);
      parentElement.removeEventListener('mouseenter', () => setIsHovered(true));
      parentElement.removeEventListener('mouseleave', () =>
        setIsHovered(false)
      );
    };
  }, [parentElement, handleMouseMove]);

  return (
    <motion.div
      ref={containerRef}
      className={cn(
        'pointer-events-none absolute rounded-full bg-[radial-gradient(circle_at_center,var(--tw-gradient-stops),transparent_80%)] blur-xl transition-opacity duration-200',
        'from-zinc-50 via-zinc-100 to-zinc-200',
        isHovered ? 'opacity-100' : 'opacity-0',
        className
      )}
      style={{
        width: size,
        height: size,
        left: spotlightLeft,
        top: spotlightTop,
      }}
    />
  );
}

```
```tsx
shadcn/card
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

Install these NPM dependencies:
```bash
@splinetool/runtime, @splinetool/react-spline, framer-motion
```